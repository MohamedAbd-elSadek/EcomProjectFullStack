// <auto-generated />
using System;
using EcomProject.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcomProject.DAL.Migrations
{
    [DbContext(typeof(EcommDBContext))]
    [Migration("20250514134259_seedingProductsANDCategories")]
    partial class seedingProductsANDCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcomProject.DAL.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("3b9ff13b-6710-49f5-93a1-91606740a046"),
                            Description = "Devices and gadgets for everyday use.",
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = new Guid("684f4d29-2a41-405f-b45b-eccda68c6eb2"),
                            Description = "Comfortable and stylish furniture for home and office.",
                            Name = "Furniture"
                        },
                        new
                        {
                            CategoryId = new Guid("681d5e12-a354-44d0-a2db-5e880f41f8bb"),
                            Description = "Smart devices for home management.",
                            Name = "Home Automation"
                        },
                        new
                        {
                            CategoryId = new Guid("0bf114eb-4628-4ca7-afe1-34794aec6148"),
                            Description = "High-quality kitchen and dining products.",
                            Name = "Kitchenware"
                        },
                        new
                        {
                            CategoryId = new Guid("84219a8e-dd9a-4df6-9234-cac995fd8c4e"),
                            Description = "Equipment and accessories for fitness enthusiasts.",
                            Name = "Fitness"
                        },
                        new
                        {
                            CategoryId = new Guid("760b3280-d388-4e1c-bdb8-580f046e9c91"),
                            Description = "High-quality audio devices for music lovers.",
                            Name = "Audio"
                        },
                        new
                        {
                            CategoryId = new Guid("56f443af-13db-42de-87dc-32c29af77930"),
                            Description = "Essential home appliances for daily use.",
                            Name = "Appliances"
                        },
                        new
                        {
                            CategoryId = new Guid("7a79204f-3df3-448f-99e8-a51bf60178ac"),
                            Description = "Modern lighting solutions for home and office.",
                            Name = "Lighting"
                        },
                        new
                        {
                            CategoryId = new Guid("8192919e-a763-4fd1-bb30-bea06339e904"),
                            Description = "Durable and stylish bags for travel and daily use.",
                            Name = "Bags & Luggage"
                        },
                        new
                        {
                            CategoryId = new Guid("cbfa6f78-6ffa-457f-ac6e-d688005aeab4"),
                            Description = "Accessories to enhance your computing experience.",
                            Name = "Computer Accessories"
                        });
                });

            modelBuilder.Entity("EcomProject.DAL.Models.Photo", b =>
                {
                    b.Property<Guid>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhotoId");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("EcomProject.DAL.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ManufactureDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("18ab1b16-fb91-48eb-b3cc-c6ca78ca27c1"),
                            CategoryId = new Guid("3b9ff13b-6710-49f5-93a1-91606740a046"),
                            Description = "Noise-cancelling wireless headphones with 20-hour battery life.",
                            Discount = 10,
                            ManufactureDate = new DateOnly(2023, 1, 15),
                            Name = "Wireless Headphones",
                            Price = 199.99m
                        },
                        new
                        {
                            ProductId = new Guid("69b98343-bccb-43c7-a81f-d21a506995f5"),
                            CategoryId = new Guid("684f4d29-2a41-405f-b45b-eccda68c6eb2"),
                            Description = "Ergonomic leather chair for office use.",
                            Discount = 15,
                            ManufactureDate = new DateOnly(2022, 11, 20),
                            Name = "Leather Office Chair",
                            Price = 299.99m
                        },
                        new
                        {
                            ProductId = new Guid("d8fb6052-f65a-4a7d-b66e-253e7e588919"),
                            CategoryId = new Guid("681d5e12-a354-44d0-a2db-5e880f41f8bb"),
                            Description = "Wi-Fi enabled thermostat for energy-efficient heating.",
                            Discount = 5,
                            ManufactureDate = new DateOnly(2023, 3, 5),
                            Name = "Smart Thermostat",
                            Price = 149.99m
                        },
                        new
                        {
                            ProductId = new Guid("37889d2a-9036-4f2b-9f43-dbc081587c22"),
                            CategoryId = new Guid("0bf114eb-4628-4ca7-afe1-34794aec6148"),
                            Description = "Insulated stainless steel water bottle, 1L capacity.",
                            Discount = 0,
                            ManufactureDate = new DateOnly(2023, 2, 10),
                            Name = "Stainless Steel Water Bottle",
                            Price = 24.99m
                        },
                        new
                        {
                            ProductId = new Guid("7ee6f6fb-3c44-4d88-a66c-0805b3a9ff3d"),
                            CategoryId = new Guid("84219a8e-dd9a-4df6-9234-cac995fd8c4e"),
                            Description = "Eco-friendly yoga mat with non-slip surface.",
                            Discount = 20,
                            ManufactureDate = new DateOnly(2023, 4, 1),
                            Name = "Yoga Mat",
                            Price = 39.99m
                        },
                        new
                        {
                            ProductId = new Guid("76bdcd16-a467-4a43-be54-60a682f9f097"),
                            CategoryId = new Guid("760b3280-d388-4e1c-bdb8-580f046e9c91"),
                            Description = "Portable Bluetooth speaker with 12-hour battery life.",
                            Discount = 10,
                            ManufactureDate = new DateOnly(2023, 1, 25),
                            Name = "Bluetooth Speaker",
                            Price = 79.99m
                        },
                        new
                        {
                            ProductId = new Guid("dcdf275f-569b-495d-b31b-1bc7768609a4"),
                            CategoryId = new Guid("56f443af-13db-42de-87dc-32c29af77930"),
                            Description = "Fast-boiling electric kettle with auto-shutoff.",
                            Discount = 0,
                            ManufactureDate = new DateOnly(2023, 3, 15),
                            Name = "Electric Kettle",
                            Price = 49.99m
                        },
                        new
                        {
                            ProductId = new Guid("2ffd6f27-ec2f-4c5c-bb6d-3696dbfc19b1"),
                            CategoryId = new Guid("7a79204f-3df3-448f-99e8-a51bf60178ac"),
                            Description = "Adjustable LED desk lamp with 3 brightness levels.",
                            Discount = 5,
                            ManufactureDate = new DateOnly(2023, 2, 28),
                            Name = "LED Desk Lamp",
                            Price = 34.99m
                        },
                        new
                        {
                            ProductId = new Guid("30cd4e3e-713d-49c4-bfd6-0b9a3397d6a2"),
                            CategoryId = new Guid("8192919e-a763-4fd1-bb30-bea06339e904"),
                            Description = "Water-resistant backpack with multiple compartments.",
                            Discount = 15,
                            ManufactureDate = new DateOnly(2023, 4, 10),
                            Name = "Backpack",
                            Price = 59.99m
                        },
                        new
                        {
                            ProductId = new Guid("f6cc363d-166e-450e-962c-69f25ae7ee1e"),
                            CategoryId = new Guid("cbfa6f78-6ffa-457f-ac6e-d688005aeab4"),
                            Description = "Ergonomic wireless mouse with silent clicks.",
                            Discount = 0,
                            ManufactureDate = new DateOnly(2023, 3, 20),
                            Name = "Wireless Mouse",
                            Price = 29.99m
                        });
                });

            modelBuilder.Entity("EcomProject.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("EcomProject.DAL.Models.Photo", b =>
                {
                    b.HasOne("EcomProject.DAL.Models.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcomProject.DAL.Models.Product", b =>
                {
                    b.HasOne("EcomProject.DAL.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EcomProject.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EcomProject.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcomProject.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EcomProject.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcomProject.DAL.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcomProject.DAL.Models.Product", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
